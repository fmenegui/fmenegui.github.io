---
title: "Einsum"
description: "Einsum Tutorial"
author:
  - name: Felipe Dias
    url: xxx
date: 01-02-2024
categories: [tutorial, Python, PyTorch] # self-defined categories
citation: 
  url: xxx
image: il.jpg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

# Introduction

Einstein summation notation, commonly denoted as `einsum`, is a powerful tool for performing optimized matrix operations. It allows us to avoid using unnecessary for loops and simplifies complex matrix manipulations, making code more readable and efficient.

Einsum is available in different libraries, such as [Numpy](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html), [PyTorch](https://pytorch.org/docs/stable/generated/torch.einsum.html) and [Tensorflow](https://www.tensorflow.org/api_docs/python/tf/einsum).

# What is `einsum`?

## Matrix notation

Before diving deeper into einsum, let's briefly review some matrix terminology. Consider a matrix A with 3 rows and 3 columns, represented as follows:

```plaintext
A = [
    a11 a12 a13
    a21 a22 a23
    a31 a32 a33
]
```

This matrix is commonly described as a 3x3 matrix, indicating it has 3 rows and 3 columns. 

We can denote the element in the first row and first column as a11 and the element in the second row and third column as a2,3. 

More generally, we can represent the element in the i-th row and j-th column as aij. This notation is applicable to any N-dimensional tensor. For example, in the case of a one-dimensional vector v, we can denote the element at position i as vi.

## Intuition

The einsum can make two operations over tensors: **multiplication** and **summation**. 

We will try to understand the mechanism on how this notation perfom these two operations.

### Multiplication

Let's consider another 3x3 matrix called B. We can create a third matrix, C, which contains elements derived from the multiplication of corresponding elements in A and B. 

For instance, c11 = a11 * b11. In general, cij = aij * bij, meaning that the value in the i-th row and j-th column of C (cij) is obtained by multiplying the i-th row and j-th column of A (aij) by the i-th row and j-th column of B (bij).

```python
import numpy as np

A = np.random.random((3, 3))
B = np.random.random((3, 3))

C = np.multiply(A, B)
```

Alternatively, you can achieve the same operation using einsum notation:

```python
import numpy as np

A = np.random.random((3, 3))
B = np.random.random((3, 3))

C = np.einsum('ij,ij->ij', A, B)
```

The einsum notation structure resembles cij = aij * bij, as shown below:

**c<span style="color: red;">ij</span>** = **a<span style="color: blue; font-weight: bold;">ij</span>** * **b<span style="color: magenta; font-weight: bold;">ij</span>** \
np.einsum('**<span style="color: blue; font-weight: bold;">ij</span>**,**<span style="color: magenta; font-weight: bold;">ij</span>**->**<span style="color: red; font-weight: bold;">ij</span>**', **<span style="color: blue; font-weight: bold;">A</span>**, **<span style="color: magenta; font-weight: bold;">B</span>**)

This structure follows a specific pattern: first, you specify indices for each of your inputs separated by commas (we have two inputs: A and B), as in 'ij,ij'. Then, you add an arrow to indicate the beginning of the output definition (->). Finally, you add the indices of the outputs, in this case, 'ij'. Overall, it appears as 'ij,ij->ij'. Einsum performs the multiplication of corresponding elements (aij and bij in this case).


We can also understand the einsum notation by thinking in terms of for loops:

```python 
C = np.zeros((3,3))
for i in range(3):
    for j in range(3):
        C[i, j] = A[i, j] * B[i, j]
```

Now, let's consider another example where we multiply the vector v = [1, 2, 3] element-wise by the vector p = [4, 5, 6] using einsum notation.

Thinking in terms of math notation, we would have zi = vi * pi. 

Using einsum:

```python
v = np.array([1, 2, 3])
p = np.array([4, 5, 6])

z = np.einsum('i,i->i', v, p)
```

In our for-loop analogy:

```python
v = np.array([1, 2, 3])
p = np.array([4, 5, 6])
z = np.zeros(3)
for i in range(3):
  z[i] = v[i]*p[i]
```

Now, let's explore what happens when we use 'i,j' instead of 'i,i' in the einsum notation for our vectors v and p: 

In this scenario, we introduce one index for vector v (denoted as i) and another index for vector p (denoted as j). The einsum operation will perform element-wise multiplication, combing each element of v with every element of p. 

Consider vector v with a size of 3 and vector p with the same size of 3. When we use 'i,j' in einsum, we end up with 9 possible combinations: v0 * p0, v0 * p1, v0 * p2, v1 * p0, v1 * p1, v1 * p2, v2 * p0, v2 * p1, and v2 * p2. 

The einsum operation organizes these combinations into a 3x3 matrix, where each element cij corresponds to the product of vi and pj.

To illustrate this with a for loop analogy:

```python
for i in range(3):
    for j in range(3):
        c[i, j] = v[i] * p[j]
```

In einsum notation, we would write:

```python
np.einsum('i,j->ij', v,p)
```

### Summation