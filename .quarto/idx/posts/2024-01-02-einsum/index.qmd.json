{"title":"Einsum","markdown":{"yaml":{"title":"Einsum","description":"Einsum Tutorial","author":[{"name":"Felipe Dias","url":"https://fmenegui.github.io/posts/2024-01-02-einsum"}],"date":"01-02-2024","categories":["tutorial","Python","PyTorch"],"citation":{"url":"xxx"},"image":"il.jpg","draft":true},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nEinstein summation notation, commonly denoted as `einsum`, is a powerful tool for performing optimized matrix operations. It allows us to avoid using unnecessary for loops and simplifies complex matrix manipulations, making code more readable and efficient.\n\nEinsum is available in different libraries, such as [Numpy](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html), [PyTorch](https://pytorch.org/docs/stable/generated/torch.einsum.html) and [Tensorflow](https://www.tensorflow.org/api_docs/python/tf/einsum).\n\n# What is `einsum`?\n\n## Matrix notation\n\nBefore diving deeper into einsum, let's briefly review some matrix terminology. Consider a matrix A with 3 rows and 3 columns, represented as follows:\n\n```plaintext\nA = [\n    a11 a12 a13\n    a21 a22 a23\n    a31 a32 a33\n]\n```\n\nThis matrix is commonly described as a 3x3 matrix, indicating it has 3 rows and 3 columns. \n\nWe can denote the element in the first row and first column as a11 and the element in the second row and third column as a2,3. \n\nMore generally, we can represent the element in the i-th row and j-th column as aij. This notation is applicable to any N-dimensional tensor. For example, in the case of a one-dimensional vector v, we can denote the element at position i as vi.\n\n## Intuition\n\nThe einsum can make two operations over tensors: **multiplication** and **summation**. \n\nWe will try to understand the mechanism on how this notation perfom these two operations.\n\n### Multiplication\n\nLet's consider another 3x3 matrix called B. We can create a third matrix, C, which contains elements derived from the multiplication of corresponding elements in A and B. \n\nFor instance, c11 = a11 * b11. In general, cij = aij * bij, meaning that the value in the i-th row and j-th column of C (cij) is obtained by multiplying the i-th row and j-th column of A (aij) by the i-th row and j-th column of B (bij).\n\n```python\nimport numpy as np\n\nA = np.random.random((3, 3))\nB = np.random.random((3, 3))\n\nC = np.multiply(A, B)\n```\n\nAlternatively, you can achieve the same operation using einsum notation:\n\n```python\nimport numpy as np\n\nA = np.random.random((3, 3))\nB = np.random.random((3, 3))\n\nC = np.einsum('ij,ij->ij', A, B)\n```\n\nThe einsum notation structure resembles cij = aij * bij, as shown below:\n\n**c<span style=\"color: red;\">ij</span>** = **a<span style=\"color: blue; font-weight: bold;\">ij</span>** * **b<span style=\"color: magenta; font-weight: bold;\">ij</span>** \\\nnp.einsum('**<span style=\"color: blue; font-weight: bold;\">ij</span>**,**<span style=\"color: magenta; font-weight: bold;\">ij</span>**->**<span style=\"color: red; font-weight: bold;\">ij</span>**', **<span style=\"color: blue; font-weight: bold;\">A</span>**, **<span style=\"color: magenta; font-weight: bold;\">B</span>**)\n\nThis structure follows a specific pattern: first, you specify indices for each of your inputs separated by commas (we have two inputs: A and B), as in 'ij,ij'. Then, you add an arrow to indicate the beginning of the output definition (->). Finally, you add the indices of the outputs, in this case, 'ij'. Overall, it appears as 'ij,ij->ij'. Einsum performs the multiplication of corresponding elements (aij and bij in this case).\n\n\nWe can also understand the einsum notation by thinking in terms of for loops:\n\n```python \nC = np.zeros((3,3))\nfor i in range(3):\n    for j in range(3):\n        C[i, j] = A[i, j] * B[i, j]\n```\n\nNow, let's consider another example where we multiply the vector v = [1, 2, 3] element-wise by the vector p = [4, 5, 6] using einsum notation.\n\nThinking in terms of math notation, we would have zi = vi * pi. \n\nUsing einsum:\n\n```python\nv = np.array([1, 2, 3])\np = np.array([4, 5, 6])\n\nz = np.einsum('i,i->i', v, p)\n```\n\nIn our for-loop analogy:\n\n```python\nv = np.array([1, 2, 3])\np = np.array([4, 5, 6])\nz = np.zeros(3)\nfor i in range(3):\n  z[i] = v[i]*p[i]\n```\n\nNow, let's explore what happens when we use 'i,j' instead of 'i,i' in the einsum notation for our vectors v and p: \n\nIn this scenario, we introduce one index for vector v (denoted as i) and another index for vector p (denoted as j). The einsum operation will perform element-wise multiplication, combing each element of v with every element of p. \n\nConsider vector v with a size of 3 and vector p with the same size of 3. When we use 'i,j' in einsum, we end up with 9 possible combinations: v0 * p0, v0 * p1, v0 * p2, v1 * p0, v1 * p1, v1 * p2, v2 * p0, v2 * p1, and v2 * p2. \n\nThe einsum operation organizes these combinations into a 3x3 matrix, where each element cij corresponds to the product of vi and pj.\n\nTo illustrate this with a for loop analogy:\n\n```python\nfor i in range(3):\n    for j in range(3):\n        c[i, j] = v[i] * p[j]\n```\n\nIn einsum notation, we would write:\n\n```python\nnp.einsum('i,j->ij', v,p)\n```\n\n### Summation","srcMarkdownNoYaml":"\n\n# Introduction\n\nEinstein summation notation, commonly denoted as `einsum`, is a powerful tool for performing optimized matrix operations. It allows us to avoid using unnecessary for loops and simplifies complex matrix manipulations, making code more readable and efficient.\n\nEinsum is available in different libraries, such as [Numpy](https://numpy.org/doc/stable/reference/generated/numpy.einsum.html), [PyTorch](https://pytorch.org/docs/stable/generated/torch.einsum.html) and [Tensorflow](https://www.tensorflow.org/api_docs/python/tf/einsum).\n\n# What is `einsum`?\n\n## Matrix notation\n\nBefore diving deeper into einsum, let's briefly review some matrix terminology. Consider a matrix A with 3 rows and 3 columns, represented as follows:\n\n```plaintext\nA = [\n    a11 a12 a13\n    a21 a22 a23\n    a31 a32 a33\n]\n```\n\nThis matrix is commonly described as a 3x3 matrix, indicating it has 3 rows and 3 columns. \n\nWe can denote the element in the first row and first column as a11 and the element in the second row and third column as a2,3. \n\nMore generally, we can represent the element in the i-th row and j-th column as aij. This notation is applicable to any N-dimensional tensor. For example, in the case of a one-dimensional vector v, we can denote the element at position i as vi.\n\n## Intuition\n\nThe einsum can make two operations over tensors: **multiplication** and **summation**. \n\nWe will try to understand the mechanism on how this notation perfom these two operations.\n\n### Multiplication\n\nLet's consider another 3x3 matrix called B. We can create a third matrix, C, which contains elements derived from the multiplication of corresponding elements in A and B. \n\nFor instance, c11 = a11 * b11. In general, cij = aij * bij, meaning that the value in the i-th row and j-th column of C (cij) is obtained by multiplying the i-th row and j-th column of A (aij) by the i-th row and j-th column of B (bij).\n\n```python\nimport numpy as np\n\nA = np.random.random((3, 3))\nB = np.random.random((3, 3))\n\nC = np.multiply(A, B)\n```\n\nAlternatively, you can achieve the same operation using einsum notation:\n\n```python\nimport numpy as np\n\nA = np.random.random((3, 3))\nB = np.random.random((3, 3))\n\nC = np.einsum('ij,ij->ij', A, B)\n```\n\nThe einsum notation structure resembles cij = aij * bij, as shown below:\n\n**c<span style=\"color: red;\">ij</span>** = **a<span style=\"color: blue; font-weight: bold;\">ij</span>** * **b<span style=\"color: magenta; font-weight: bold;\">ij</span>** \\\nnp.einsum('**<span style=\"color: blue; font-weight: bold;\">ij</span>**,**<span style=\"color: magenta; font-weight: bold;\">ij</span>**->**<span style=\"color: red; font-weight: bold;\">ij</span>**', **<span style=\"color: blue; font-weight: bold;\">A</span>**, **<span style=\"color: magenta; font-weight: bold;\">B</span>**)\n\nThis structure follows a specific pattern: first, you specify indices for each of your inputs separated by commas (we have two inputs: A and B), as in 'ij,ij'. Then, you add an arrow to indicate the beginning of the output definition (->). Finally, you add the indices of the outputs, in this case, 'ij'. Overall, it appears as 'ij,ij->ij'. Einsum performs the multiplication of corresponding elements (aij and bij in this case).\n\n\nWe can also understand the einsum notation by thinking in terms of for loops:\n\n```python \nC = np.zeros((3,3))\nfor i in range(3):\n    for j in range(3):\n        C[i, j] = A[i, j] * B[i, j]\n```\n\nNow, let's consider another example where we multiply the vector v = [1, 2, 3] element-wise by the vector p = [4, 5, 6] using einsum notation.\n\nThinking in terms of math notation, we would have zi = vi * pi. \n\nUsing einsum:\n\n```python\nv = np.array([1, 2, 3])\np = np.array([4, 5, 6])\n\nz = np.einsum('i,i->i', v, p)\n```\n\nIn our for-loop analogy:\n\n```python\nv = np.array([1, 2, 3])\np = np.array([4, 5, 6])\nz = np.zeros(3)\nfor i in range(3):\n  z[i] = v[i]*p[i]\n```\n\nNow, let's explore what happens when we use 'i,j' instead of 'i,i' in the einsum notation for our vectors v and p: \n\nIn this scenario, we introduce one index for vector v (denoted as i) and another index for vector p (denoted as j). The einsum operation will perform element-wise multiplication, combing each element of v with every element of p. \n\nConsider vector v with a size of 3 and vector p with the same size of 3. When we use 'i,j' in einsum, we end up with 9 possible combinations: v0 * p0, v0 * p1, v0 * p2, v1 * p0, v1 * p1, v1 * p2, v2 * p0, v2 * p1, and v2 * p2. \n\nThe einsum operation organizes these combinations into a 3x3 matrix, where each element cij corresponds to the product of vi and pj.\n\nTo illustrate this with a for loop analogy:\n\n```python\nfor i in range(3):\n    for j in range(3):\n        c[i, j] = v[i] * p[j]\n```\n\nIn einsum notation, we would write:\n\n```python\nnp.einsum('i,j->ij', v,p)\n```\n\n### Summation"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"minty","title-block-banner":true,"title":"Einsum","description":"Einsum Tutorial","author":[{"name":"Felipe Dias","url":"https://fmenegui.github.io/posts/2024-01-02-einsum"}],"date":"01-02-2024","categories":["tutorial","Python","PyTorch"],"citation":{"url":"xxx"},"image":"il.jpg","draft":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}